<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/posts/42877/"/>
    <url>/posts/42877/</url>
    
    <content type="html"><![CDATA[<h2 id="二分查找概述"><a href="#二分查找概述" class="headerlink" title="二分查找概述"></a>二分查找概述</h2><p>二分查找（Binary Search，简称<strong>BS</strong>），又称<strong>折半查找</strong> ，是一种效率很高的查找方法。</p><p>算法要求：<br>1.线性表必须采用<strong>顺序存储</strong>结构，不能为链式结构<br>2.元素已经排过序(<strong>有序</strong>)</p><p>算法原理：<br>每次取搜索区间[low，high]中间位置mid的值进行判断，进而使搜索区间减半，即将原区间划分为[low,mid-1]和[mid+1,high]两个区间。重复这一过程，查找结束，获取目标值的索引或者未找到。</p><p>时间复杂度：<br>每一次以中间元素作为根节点，将中间元素的左侧区间和右侧区间分别作为左子树和右子树，依次执行可以将整个区间转化为一棵<strong>二叉搜索树</strong>。该搜索树的高度为logn，因此时间复杂度为<strong>O（logn）</strong>。</p><p>对于二分查找的理解，Kmp算法的发明者Knuth曾经说过：思路很简单，细节是魔鬼。BS具有许多实现形式（循环、递归等），而这些形式在细节上有所不同，比如搜索区间（左开右闭、左闭右开、左闭右闭等）、循环条件、区间更新操作等。</p><h2 id="标准BS"><a href="#标准BS" class="headerlink" title="标准BS"></a>标准BS</h2><p>搜索区间：[low,high]（<strong>左闭右闭</strong>）（下面以升序为例）<br>思路：每次比较target与当前中间位置元素nums[mid]的大小。如果两者相等，则找到目标元素的索引；如果target比较大，则说明target在mid右侧；如果target比较小，则说明target在mid左侧。经过上述过程，<strong>low左侧的元素都比target小，high右侧的元素比target大</strong>，当low&#x3D;&#x3D;high+1时，说明未找到元素，终止循环，见下图。</p><p><img src="/../images/BS/%E6%A0%87%E5%87%86BS.png" alt="标准BS"></p><p>代码：</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stan"><span class="hljs-type">int</span> binarySearch(<span class="hljs-type">vector</span>&lt;<span class="hljs-type">int</span>&gt; nums, <span class="hljs-type">int</span> <span class="hljs-built_in">target</span>)&#123;<br>    <span class="hljs-type">int</span> low = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> high = nums.<span class="hljs-built_in">size</span>()-<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(low &lt;= high)&#123;<br>        <span class="hljs-type">int</span> mid = (low+high)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid] == <span class="hljs-built_in">target</span>) <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &lt; <span class="hljs-built_in">target</span>) low = mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &gt; <span class="hljs-built_in">target</span>) high = mid-<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">//表示未找到</span><br>&#125;<br></code></pre></td></tr></table></figure><p>作用：查找某一个数<br>注意：</p><ol><li>由于mid本身已经判断过，无需进行下一步的搜索，因此区间更新操作为low&#x3D;mid+1或者high&#x3D;mid-1（而不是low&#x3D;mid或者high&#x3D;mid）。</li><li>循环判断条件为low&lt;&#x3D;high，对应的终止条件为low&#x3D;&#x3D;high+1，此时搜索区间为空。而如果改为low&lt;high，则终止条件为low&#x3D;&#x3D;high，当前索引low没有被搜索。</li><li><strong>溢出问题</strong>：在low和high的值较大的情况下，计算mid时会产生整数溢出。因此可以将mid的计算形式改为<code>mid=low+(high-low)/2</code></li></ol><h2 id="边界问题"><a href="#边界问题" class="headerlink" title="边界问题"></a>边界问题</h2><p>对于一些获取左右边界的问题，例如对于序列seq&#x3D;[1，2，3，3，3，4，5]，target&#x3D;3，如果想要获取第一个等于target的元素的下标，标准BS则无法解决。下面以查找左边界为例。</p><p>搜索区间：[low,high]（左闭右闭）<br>思路：比较target与nums[mid]的大小，记第一个等于target的元素为elem。如果两者相等，则说明elem在mid左侧或者等于mid。如果target比较大，则说明elem在mid右侧；如果target比较小，则elem一定在mid左侧。<strong>low左侧的元素都比target小，high右侧的元素都大于等于target</strong>，当low&#x3D;&#x3D;high+1时，终止循环，见下图。</p><p><img src="/../images/BS/%E5%B7%A6%E8%BE%B9%E7%95%8CBS.png" alt="左边界BS"></p><p>代码：</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stan"><span class="hljs-type">int</span> binarySearch_lowerBound(<span class="hljs-type">vector</span>&lt;<span class="hljs-type">int</span>&gt; nums, <span class="hljs-type">int</span> <span class="hljs-built_in">target</span>)&#123;<br>    <span class="hljs-type">int</span> low = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> high = nums.<span class="hljs-built_in">size</span>()-<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(low &lt;= high)&#123;<br>        <span class="hljs-type">int</span> mid = (low+high)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid] == <span class="hljs-built_in">target</span>) high = mid-<span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &lt; <span class="hljs-built_in">target</span>) low = mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &gt; <span class="hljs-built_in">target</span>) high = mid-<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(low == nums.<span class="hljs-built_in">size</span>() || nums[low] != <span class="hljs-built_in">target</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">//未找到</span><br>    <span class="hljs-keyword">return</span> low; <span class="hljs-comment">//找到左边界</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：<br>1.与标准BS不同之处在于：当nums[mid]&#x3D;&#x3D;target时，elem可能在mid左侧，因此high&#x3D;mid-1，而不能返回索引。<br>2.循环终止条件只有一个，即low&#x3D;&#x3D;high+1，无论查找成功或者失败，只要满足这一条件时均会终止循环，因此需要判断是否查找成功。如果<strong>当前low对应的元素不等于target或者low等于数组长度</strong>（见下图），则查找失败；反之查找成功，此时low对应的元素即为elem。</p><p><img src="/../images/BS/%E5%B7%A6%E8%BE%B9%E7%95%8CBS-low%E8%B6%8A%E7%95%8C.png" alt="low越界"></p><p>附查找右边界的代码：</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stan"><span class="hljs-type">int</span> binarySearch_upperBound(<span class="hljs-type">vector</span>&lt;<span class="hljs-type">int</span>&gt; nums, <span class="hljs-type">int</span> <span class="hljs-built_in">target</span>)&#123;<br>    <span class="hljs-type">int</span> low = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> high = nums.<span class="hljs-built_in">size</span>()-<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(low &lt;= high)&#123;<br>        <span class="hljs-type">int</span> mid = (low+high)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid] == <span class="hljs-built_in">target</span>) low = mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &lt; <span class="hljs-built_in">target</span>) low = mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &gt; <span class="hljs-built_in">target</span>) high = mid-<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(high&lt;<span class="hljs-number">0</span> || nums[high] != <span class="hljs-built_in">target</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">//未找到</span><br>    <span class="hljs-keyword">return</span> high; <span class="hljs-comment">//找到右边界</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/BS/%E5%8F%B3%E8%BE%B9%E7%95%8CBS.png" alt="右边界BS"></p><p><strong>参考文章</strong>：</p><ol><li><a href="https://www.cnblogs.com/kyoner/p/11080078.html">详解二分查找算法</a></li><li><a href="https://blog.csdn.net/qjyws/article/details/126416671">算法刷题：二分查找及对应左边界和右边界的寻找整理</a></li><li><a href="https://zhuanlan.zhihu.com/p/569929092">二分查找</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python函数进阶</title>
    <link href="/posts/53362/"/>
    <url>/posts/53362/</url>
    
    <content type="html"><![CDATA[<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>Python函数的参数传递方式为<strong>引用传递</strong>，即让形参变量指向实参变量所绑定的对象。</p><p>函数<strong>id</strong>()可以返回对象的id标识，每个对象由唯一的id标识。</p><p>注意：</p><ol><li>如果实参是可变类型，在函数内部通过形参调用<strong>方法</strong>改变数据的内容，会修改实参的值。</li><li>如果实参是可变类型，在函数体内部通过形参执行<strong>赋值语句</strong>，不会修改实参。使用赋值语句只会让形参指向一个新创建的对象，并不会对实参产生影响。</li></ol><p><img src="/../images/Python/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6-%E9%80%9A%E8%BF%87%E5%BD%A2%E5%8F%82%E6%89%A7%E8%A1%8C%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5.png" alt="执行赋值语句"></p><ol start="3"><li><strong>如果实参是不可变类型，在函数体内修改不会影响实参的值。</strong></li></ol><p>变量的声明和赋值本质：把一个变量绑定到某个内存单元（即对象）。</p><h3 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h3><p>具有默认值的参数为缺省参数（也称为可变参数）。<br>注意：必须保证带有默认值的缺省参数在<strong>参数列表末尾</strong>，否则会报错。</p><p><img src="/../images/Python/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6-%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0%E4%BD%8D%E7%BD%AE.png" alt="缺省参数位置"></p><h3 id="多值参数"><a href="#多值参数" class="headerlink" title="多值参数"></a>多值参数</h3><p>当函数的参数数目不确定时可以使用多值参数。参数名前增加<strong>一个星号可以接收元组，两个星号可以接收字典</strong>。命名时通常采用以下方式：</p><blockquote><p>*args 存放元组参数 （args为arguments的缩写）<br>**kwargs 存放字典参数 （kw为keyword的缩写）</p></blockquote><p>实例：<br><img src="/../images/Python/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6-%E5%A4%9A%E5%80%BC%E5%8F%82%E6%95%B0.png" alt="多值参数"></p><p><strong>拆包语法</strong><br>如果需要将一个元组变量直接传递给args，则在该变量前增加一个星号；<br>如果需要将一个字典变量直接传递给kwargs，则在字典变量前增加两个星号。</p><p><img src="/../images/Python/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6-%E6%8B%86%E5%8C%85%E8%AF%AD%E6%B3%95.png" alt="拆包语法"></p><p>注意：采用这种方式传递的字典变量的键必须为str类型。</p><h3 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h3><p>Python在函数调用时默认按照位置顺序传递形参。而按照名称指定传入的参数称为命名参数（也称关键字参数）。采用这种方式<strong>传递的参数与顺序无关</strong>。如果存在多个缺省参数时，可以选择特定的参数进行传递。</p><p><img src="/../images/Python/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6-%E5%91%BD%E5%90%8D%E5%8F%82%E6%95%B0.png" alt="命名参数"></p><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>Python中函数的返回值采用<strong>引用传递</strong>方式。</p><p><img src="/../images/Python/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6-%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92.png" alt="返回值的引用传递"></p><p>函数使用<strong>元组</strong>可以返回多个值，同时可以使用多个变量接收函数的多个返回值。</p><p><img src="/../images/Python/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6-%E5%A4%9A%E4%B8%AA%E8%BF%94%E5%9B%9E%E5%80%BC.png" alt="多个返回值"></p><h2 id="变量的作用域和生存期"><a href="#变量的作用域和生存期" class="headerlink" title="变量的作用域和生存期"></a>变量的作用域和生存期</h2><p><strong>全局变量</strong>：在函数和类之外声明的变量。<br><strong>局部变量</strong>：在函数体中声明的变量。</p><p>注意：</p><ol><li>全局变量可以被不同的模块和函数访问，可能会导致程序错误，因此应尽量避免使用全局变量。</li><li>局部变量在函数执行时才会被创建。</li><li>如果在函数内部定义一个与全局变量同名的变量，该变量为局部变量。Python中不允许直接修改全局变量的值，如果需要修改则在函数内部使用<strong>global</strong>关键字。</li></ol><p><img src="/../images/Python/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6-%E4%BF%AE%E6%94%B9%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.png" alt="使用global修改全局变量"></p><p>变量的生命周期（生存期）：变量从<strong>被创建到被系统回收</strong>的过程</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python基础-数据容器(3)</title>
    <link href="/posts/54928/"/>
    <url>/posts/54928/</url>
    
    <content type="html"><![CDATA[<h3 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h3><p>在常用五种数据容器中，<strong>列表、元组、字符串</strong>为序列类型，集合和字典为无序类型。公共方法如下图所示：</p><p><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(3)-%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95.png" alt="公共方法"></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(3)-%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="运算符"></p><h3 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h3><p>Python包括以下可迭代对象:<strong>序列类型、集合、字典、迭代器对象</strong>等。通用的遍历语句如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 可迭代对象集合：<br>循环体代码<br><span class="hljs-keyword">else</span>:<br>如果循环体内部使用<span class="hljs-keyword">break</span>退出循环，这一部分代码就不会被执行<br></code></pre></td></tr></table></figure><p>注：关键字<strong>Pass</strong>一般用于占位语句，可以保证程序的结构正确。程序运行时，pass不会执行任何操作。</p><h3 id="序列的切片"><a href="#序列的切片" class="headerlink" title="序列的切片"></a>序列的切片</h3><p>切片操作可以截取序列的一部分，基本形式如下：</p><p><code>s[开始下标i: 结束下标j: 步长l]</code></p><p>截取部分的范围采用“<strong>左开右闭</strong>”原则。切片采用两种索引方式，分别为正索引和负索引。<br>正索引：从序列首部到末尾依次为0、1、2…<br>负索引：从序列末尾到首部依次为-1、-2、-3…</p><p>如果省略步长则默认步长为1。<strong>步长的正负决定截取的方向</strong>，如果步长为正数表示从左往右截取，反之为负数则表示从右往左截取。<br>开始下标和结束下标均可以缺省，默认值为<strong>序列在当前截取方向上的起点和终点</strong>。例如对于列表a &#x3D; [0,1,2]，如果步长为负，则开始下标的缺省值为2，结束下标为0。</p><p>以列表为例：<br><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(3)-%E5%88%87%E7%89%87.png" alt="序列的切片"></p><p>注意:在切片中，<strong>如果索引超出有效范围不会报错</strong>，而是会进行<strong>截断</strong>，即超出部分全部视为空值，最终获取时忽略这一部分空值。</p><p>应用:无需遍历即可获取序列的<strong>逆序</strong></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python基础-数据容器(2)</title>
    <link href="/posts/18065/"/>
    <url>/posts/18065/</url>
    
    <content type="html"><![CDATA[<h2 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串 str"></a>字符串 str</h2><h3 id="1-常用方法总结"><a href="#1-常用方法总结" class="headerlink" title="1.常用方法总结"></a>1.常用方法总结</h3><p>其中s1、s2均代表字符串</p><ol><li><p>统计与查找</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-built_in">s1</span>.count(<span class="hljs-built_in">s2</span>) <span class="hljs-comment"># 统计子字符串s2在s1中出现的次数</span><br><br><span class="hljs-built_in">s1</span>.index(<span class="hljs-built_in">s2</span>) <span class="hljs-comment"># 获取子字符串s2在s1中的起始下标</span><br><span class="hljs-built_in">s1</span>.find(<span class="hljs-built_in">s2</span>) <span class="hljs-comment"># 查找子串s2并返回起始下标</span><br><span class="hljs-comment"># index与find区别在于：如果子串不存在，find方法返回-1，而index方法会报错</span><br></code></pre></td></tr></table></figure></li><li><p>判断</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 返回值均为布尔型</span><br>s.isdecimal() <span class="hljs-meta"># 判断是否为数字，不能判断小数</span><br>s.isdigit() <span class="hljs-meta"># 判断是否为数字，支持判断单字节数字，不能判断小数</span><br>s.islower() <span class="hljs-meta"># 判断字母是否全为小写</span><br>s.isupper() <span class="hljs-meta"># 判断字母是否全为大写</span><br>s.isspace() <span class="hljs-meta"># 判断是否为空格</span><br></code></pre></td></tr></table></figure></li><li><p>替换</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-built_in">s2</span> = <span class="hljs-built_in">s1</span>.replace(<span class="hljs-keyword">sub1,sub2) </span><span class="hljs-comment"># 将s1中的所有子串sub1替换为sub2，返回一个新字符串</span><br><span class="hljs-built_in">s2</span> = <span class="hljs-built_in">s1</span>.upper()  <span class="hljs-comment"># 将s1所有字母转为大写，返回一个字符串</span><br><span class="hljs-built_in">s2</span> = <span class="hljs-built_in">s1</span>.lower()  <span class="hljs-comment"># 将s1所有字母转为小写，返回一个字符串</span><br></code></pre></td></tr></table></figure></li><li><p>分割与拼接</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">s_list</span> = s.split()   <span class="hljs-comment"># 分割字符串，返回一个列表。</span><br><span class="hljs-comment"># 如果参数为空，则默认以空白字符为分隔符进行拆分；</span><br><span class="hljs-comment"># 如果不为空，则按照该字符进行分割，结果中不包括该字符。</span><br><br><span class="hljs-attr">s2</span> = s1.join(seq) <span class="hljs-comment"># 拼接字符串，以s1作为连接符，seq为字符或字符串序列。</span><br><span class="hljs-attr">s2</span> = s1 * num    <span class="hljs-comment"># 将s1拼接num次</span><br></code></pre></td></tr></table></figure></li></ol><p>实例：<br><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(2)-split.png" alt="字符串分割"><br><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(2)-join.png" alt="字符串拼接"></p><ol start="5"><li>文本对齐<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 使用指定字符（默认为空格）将内容填充至长度length，返回一个新字符串</span><br><span class="hljs-attr">s2</span> = s1.center(length)  <span class="hljs-comment"># 居中对齐</span><br><span class="hljs-attr">s2</span> = s1.ljust(length)   <span class="hljs-comment"># 左对齐</span><br><span class="hljs-attr">s2</span> = s1.rjust(length)   <span class="hljs-comment"># 右对齐</span><br></code></pre></td></tr></table></figure></li></ol><p>实例：<br><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(2)-just.png" alt="文本对齐"></p><ol start="6"><li>去除空白字符<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">s2</span> = s1.strip()   <span class="hljs-comment"># 去除左右两侧的空白字符（\t\n\r等）</span><br><span class="hljs-attr">s2</span> = s1.lstrip()  <span class="hljs-comment"># 去除左侧的空白字符</span><br><span class="hljs-attr">s2</span> = s1.rstrip()  <span class="hljs-comment"># 去除右侧的空白字符</span><br></code></pre></td></tr></table></figure></li></ol><p>实例：<br><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(2)-strip.png" alt="去除空白字符"></p><h3 id="2-字符串的格式化"><a href="#2-字符串的格式化" class="headerlink" title="2.字符串的格式化"></a>2.字符串的格式化</h3><p>字符串的格式化是一种将数据转化为特定格式的字符串的方法。在Python中主要有以下几种实现形式：</p><ol><li>%形式</li></ol><p><code>格式化字符串 % (值1,值2,...)</code></p><p>在格式化字符串内部，%操作符起占位作用，%之后的部分是需要格式化的内容，可以使用变量对这些内容进行替换。常见的几种格式化字符如下：<br><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(2)-format_char.png" alt="格式化字符"></p><p>实例：<br><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(2)-%E7%99%BE%E5%88%86%E5%8F%B7%E5%BD%A2%E5%BC%8F.png" alt="%形式"></p><ol start="2"><li>format形式</li></ol><p><code>格式化字符串.format(值1,值2,...)</code></p><p>在格式化字符串内部，{}为占位符，{}内部为需要格式化的内容。format函数中常见的格式化字符与%形式的基本一致，例如s代表字符串，d代表十进制整数，f代表浮点数。</p><p>注意：{}内部第一部分为索引或键，第二部分为格式符号（包括格式化字符等），两部分之间用冒号隔开。如果{}内部不写索引，默认从0开始递增排列。</p><p>实例：<br><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(2)-format_format.png" alt="format形式"></p><p>与%形式相比，format函数能够可以实现文本对齐、百分制等更为复杂的功能。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python基础-数据容器(1)</title>
    <link href="/posts/46737/"/>
    <url>/posts/46737/</url>
    
    <content type="html"><![CDATA[<h2 id="1-列表-list"><a href="#1-列表-list" class="headerlink" title="1.列表 list"></a>1.列表 list</h2><p>列表（即数组）索引值从0开始，一般情况下默认列表中的所有数据的类型一致。</p><p>常用方法如下：<br><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(1)-list.png" alt="列表常用方法总结"></p><p>注意：</p><ol><li>clear与del的区别<br>clear会清除列表中所有元素，但内存并未释放，仍然可以通过变量名访问；<strong>del关键字会将变量从内存中删除</strong>，此时不能继续使用变量名，否则会报错。如果仅删除某一个索引对应的元素，则后续元素均向前移动一位，索引值均减1。区别见下图：</li></ol><p><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(1)-del.png" alt="del删除列表"></p><ol start="2"><li>append与extend的区别<br>extend用于合并列表，将需要插入的列表的元素加入原列表，参数为<strong>可迭代对象</strong>；append直接将整个对象当作一个元素加入原列表末尾，参数为任意对象。其区别见下图：</li></ol><p><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(1)-append.png" alt="append与extend"></p><h2 id="2-元组-tuple"><a href="#2-元组-tuple" class="headerlink" title="2.元组 tuple"></a>2.元组 tuple</h2><p>元组是由多个元素组成的序列，<strong>元组的元素不能被修改</strong></p><p><strong>元组只包含一个元素时需要在元素后面添加逗号</strong></p><p>常用方法：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta"># t代表元组</span><br><br>t.<span class="hljs-keyword">count</span>(k) <span class="hljs-meta"># 统计数据k出现的次数</span><br><br>t.<span class="hljs-keyword">index</span>(k) <span class="hljs-meta"># 查找数据k，返回数据k第一次匹配时的索引位置，如果对象不在元组中会产生异常</span><br><br>len(t) <span class="hljs-meta"># 统计元组的长度</span><br></code></pre></td></tr></table></figure><p>应用：（1）函数的参数和返回值（2）格式化字符串（3）将列表转化为元组，保证数据安全</p><p>元组和列表的转换<br>元组-&gt;列表：列表&#x3D;list（元组）  列表-&gt;元组：元组&#x3D;tuple（列表）</p><p>面试题：交换两个数字a&#x3D;6,b&#x3D;100,不能使用其他变量<br>解法一：a&#x3D;a+b b&#x3D;a-b a&#x3D;a-b<br>解法二：使用元组 a,b&#x3D;(b,a)</p><h2 id="3-集合"><a href="#3-集合" class="headerlink" title="3.集合"></a>3.集合</h2><p>Python中的集合与数学上的集合一致。集合是<strong>无序</strong>对象的聚集，并且集合中的元素<strong>不重复</strong>。存储的元素为字符串、数值类型或者元组等<strong>不可变类型</strong>。集合的内部实现基于<strong>哈希表</strong>。集合之间可以进行并集、交集、差集等运算。</p><p>集合分为可变集合set和不可变集合frozenset。下面主要介绍可变集合的常用方法(其中s、s1、s2均代表集合名)：</p><ol><li><p>添加</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">s.<span class="hljs-keyword">add</span>(elem)  <span class="hljs-meta"># 向集合添加一个元素elem，如果该元素已存在则不产生效果</span><br>s.update(iter)  <span class="hljs-meta"># 将可迭代对象iter的元素添加到集合中   </span><br></code></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">s.<span class="hljs-built_in">remove</span>(<span class="hljs-built_in">elem</span>) # 删除指定元素<span class="hljs-built_in">elem</span>，如果不存在会报错<br>s.discard(<span class="hljs-built_in">elem</span>) # 删除指定元素<span class="hljs-built_in">elem</span>，如果不存在则忽略<br>s.clear()   # 清空集合<br></code></pre></td></tr></table></figure></li><li><p>集合运算</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">s1</span> &amp; s2 <span class="hljs-comment"># 交集</span><br>s1 | s2 <span class="hljs-comment"># 并集</span><br>s1 - s2 <span class="hljs-comment"># 差集</span><br></code></pre></td></tr></table></figure><p>注意：如果要创建一个空集合，则必须用set函数创建，不能使用{ }创建（否则会创建一个空字典）</p></li></ol><h2 id="4-字典-dict"><a href="#4-字典-dict" class="headerlink" title="4.字典 dict"></a>4.字典 dict</h2><p>字典是<strong>存储无序</strong>的对象集合（列表存储的是有序对象），是键和值的<strong>哈希映射</strong>关系。它的实现同样基于<strong>哈希表</strong>。</p><p>特点：<br>（1）使用键值对存储数据，键值对之间使用逗号分隔，键和值之间使用冒号分隔<br>（2）<strong>键必须唯一</strong><br>（3）键必须是<strong>不可变类型</strong>，值可以取任意数据类型</p><p>字典的常用方法如下(其中d代表字典名,key代表键，value代表值)：</p><ol><li><p>添加</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs q">d[<span class="hljs-built_in">key</span>]=<span class="hljs-built_in">value</span>   # 如果<span class="hljs-built_in">key</span>存在，修改已存在的键值对；如果<span class="hljs-built_in">key</span>不存在，新增键值对<br><br>d1.<span class="hljs-keyword">update</span>(d2) <br># 将字典d2合并到字典d1中。如果字典d1和字典d2存在相同的键，则将对原键值对进行覆盖<br></code></pre></td></tr></table></figure></li><li><p>查看</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">keys</span> = d.keys()      <span class="hljs-comment"># 获取所有键key</span><br><span class="hljs-attr">values</span> = d.values()  <span class="hljs-comment"># 获取所有值value</span><br><span class="hljs-attr">items</span> = d.items()    <span class="hljs-comment"># 获取字典中的每一个元素</span><br></code></pre></td></tr></table></figure><p>这三种方法的返回值均为<strong>可迭代的视图对象</strong>，它们并不具备列表的功能，即无法通过索引获取元素、无法修改、无法使用内置方法等，仅支持迭代遍历。可以通过list函数将这些对象转化为列表进行操作。</p></li></ol><p>实例：<br><img src="/../images/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8(1)-keys.png" alt="视图对象"></p><ol start="3"><li><p>删除</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">del</span> d[<span class="hljs-built_in">key</span>]  # 删除键为<span class="hljs-built_in">key</span>对应的键值对<br><span class="hljs-built_in">del</span> d       # 删除整个字典，释放内存空间<br>d.<span class="hljs-built_in">pop</span>(<span class="hljs-built_in">key</span>)  # 如果键<span class="hljs-built_in">key</span>存在，返回并删除其值；如果指定的<span class="hljs-built_in">key</span>不存在，则会报错<br>d.clear()   # 清除字典中的元素<br></code></pre></td></tr></table></figure></li><li><p>迭代遍历</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> d:      <span class="hljs-meta"># k为每次遍历获得的键值对的key</span><br>    <span class="hljs-keyword">print</span>(k,d[k]) <br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python基础-基本语法</title>
    <link href="/posts/61427/"/>
    <url>/posts/61427/</url>
    
    <content type="html"><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="1-数据类型与运算符"><a href="#1-数据类型与运算符" class="headerlink" title="1.数据类型与运算符"></a>1.数据类型与运算符</h3><blockquote><p>Python中变量不需要显式声明数据类型。程序运行时，Python解释器会根据赋值语句等号右侧的数据自动推导出变量保存数据的类型。</p></blockquote><p>Python内置数据类型可以分为数值数据类型和非数值数据类型。其中内置数值数据类型有4种：int、float、bool、complex（复数类型），非数值数据类型有str、tuple（元组）、list（列表）、dict（字典）等。</p><p>Python数据类型可分为可变类型和不可变类型两种。<br><strong>不可变类型</strong>：数据不允许被修改。包括数值数据类型（4种）、str、tuple等。<br><strong>可变类型</strong>：数据可以被修改。包括list、可变集合set、dict等。</p><p>Python中的运算符与C++基本一致，需要注意以下几个：</p><ol><li>与C++不同，Python中逻辑运算符为and、or、not</li><li>**表示乘方运算</li><li>&#x2F;表示浮点数除法，而&#x2F;&#x2F;表示<strong>除法取整</strong></li></ol><h3 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2.标识符"></a>2.标识符</h3><p>Python标识符的命名规则：</p><ol><li>由<strong>字母、下划线和数字</strong>组成</li><li>不能由数字开头 </li><li>不能与关键字重名</li></ol><p>注：Python中的标识符是区分大小写的</p><p><strong>关键字</strong>即Python内部已经使用的标识符</p><p>Python命名规范：<br>（1）变量、函数、模块、包：<strong>单词的首字母采用小写字母，单词之间用下划线连接</strong>，例如：first_name<br>（2）类名：大驼峰，例如：MyHome<br>（3）常量名：所有字符全部大写，例如：LEFT</p><p>补充：在其他语言中，标识符的命名常采用<em>驼峰法</em></p><blockquote><p>大驼峰（又称<strong>Pascal命名法</strong>）：组成标识符的每个单词首字符都采用大写字母<br>小驼峰：第一个单词以小写字母开始，后续单词的首字母大写</p></blockquote><h3 id="3-程序结构"><a href="#3-程序结构" class="headerlink" title="3.程序结构"></a>3.程序结构</h3><ol><li>顺序结构</li><li>分支结构：if、else、elif（等价于C语言的else if）等</li><li>循环结构：for、while、break、continue等</li></ol><h3 id="4-变量"><a href="#4-变量" class="headerlink" title="4.变量"></a>4.变量</h3><p>程序中的数据保存在内存之中，Python并不像汇编语言和机器语言那样直接通过内存地址访问数据，而是通过赋值语局将变量<strong>绑定</strong>到相应的内存单元，之后通过变量来访问数据。</p><blockquote><p>如果<em>环境</em>将名字x映射到存储单元s，则称x被<em>绑定</em>到s。环境表示将名字映射到存储单元的函数。——陈意云，张昱《编译原理（第三版）》</p></blockquote><p><strong>Python变量被访问之前必须进行初始化，即赋值。</strong></p><h3 id="5-函数和模块"><a href="#5-函数和模块" class="headerlink" title="5.函数和模块"></a>5.函数和模块</h3><p>使用<strong>import</strong>关键字可以导入模块（包&#x2F;Python源文件）。生成随机数的代码如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 随机生成一个[1，100]的整数</span><br>import <span class="hljs-built_in">random</span><br><span class="hljs-built_in">num</span> = <span class="hljs-built_in">random</span>.randint(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)                     <br></code></pre></td></tr></table></figure><p>补充：在导入模块时，Python解释器会在与模块文件同一目录的__pycache__子目录下生成.pvc文件。pyc文件是由Python解释器<strong>编译过的字节码文件</strong>。字节码是一种低级的、与平台无关的代码，可以被Python虚拟机直接执行，提高程序的执行速度。</p><p>Python解释源程序分为两个步骤：<br>（1）处理源代码，编译生成一个二进制字节码<br>（2）对字节码进行处理，生成CPU能够识别的机器码</p><p>函数定义使用<strong>def</strong>关键字，其中参数不包含类型。在使用其他文件或模块定义的函数时，需要先使用import关键字导入该文件。</p><h3 id="6-输入和输出函数"><a href="#6-输入和输出函数" class="headerlink" title="6.输入和输出函数"></a>6.输入和输出函数</h3><p><strong>input</strong>函数能够接收从键盘输入的数据，<strong>返回字符串类型</strong>。其中括号内的信息为提示信息，并不包含在返回值中。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">name</span> <span class="hljs-operator">=</span> input(<span class="hljs-string">&quot;请输入姓名：&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>print</strong>函数能够打印输出文本，并且可以实现格式化输出。print函数由参数end指定换行符，默认输出内容后在末尾自动换行，即end&#x3D;’\n’。</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;我的名字是%s&quot;</span> % name)    <span class="hljs-meta">#输出格式化字符串</span><br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>, <span class="hljs-keyword">end</span> = <span class="hljs-string">&quot;&quot;</span>)  <span class="hljs-meta"># 不换行</span><br></code></pre></td></tr></table></figure><p>补充：<br>常用的几种转义字符如下所示：</p><p><img src="/../images/Python/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6.png" alt="转义字符"></p><p>注：\t 能够使文本在垂直方向上保持对齐</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python基础-预备知识</title>
    <link href="/posts/32360/"/>
    <url>/posts/32360/</url>
    
    <content type="html"><![CDATA[<h2 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h2><p>Python是由<strong>吉多.范罗苏姆</strong>(Guido van Rossum)创造的一门独特的程序设计语言。Python是一门<strong>完全面向对象</strong>的语言,它遵循优雅、明确、简单的设计哲学。</p><p>Python语言具有简单易学、开源、面向对象等优点，但与C&#x2F;C++相比，它的运行速度较慢，同时这门语言对格式的要求极为严格。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="编译与解释"><a href="#编译与解释" class="headerlink" title="编译与解释"></a>编译与解释</h3><p>计算机无法直接执行使用高级语言编写的源程序，只能够识别执行低级的机器指令，因此需要一种翻译程序，将源程序转化为CPU能够执行的机器指令。翻译方式可以分为解释和编译两种，具体运行过程见下图。</p><p><img src="/../images/Python/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86-compile.png" alt="编译与解释"></p><p><strong>编译</strong>是先将整个程序源代码翻译为等价的机器语言或者汇编语言格式的目标程序，之后再由CPU执行，例如C、C++等。<strong>解释</strong>是逐行翻译源程序，每翻译一句，CPU就执行一句，不产生目标代码，例如R、Python等。</p><p><strong>编译型语言的执行速度快，解释型语言跨平台性能好</strong>，而Java的跨平台是通过虚拟机实现的。</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>调试方法：在某一行设置一个断点，当程序执行到断点时暂时停止继续执行，之后通过单步调试继续向下执行。</p><p>程序断点原理：断点（breakpoint）的本质是一个<strong>中断信号</strong>，CPU执行至断点时产生中断，由调试器将程序挂起，此时程序并没有终止或者结束。</p><p>常用的调试器提供了多种单步调试方式：</p><ol><li>step into：进入子函数内部并继续单步执行</li><li>step over：不会进入子函数内部单步执行，而是把整个子函数当作一步执行</li><li>step out：将子函数中剩余部分执行完，返回上一级函数，与step into配合使用</li></ol><h3 id="Python程序排错"><a href="#Python程序排错" class="headerlink" title="Python程序排错"></a>Python程序排错</h3><ol><li>每行代码完成一个动作，因此不能把多条语句写在同一行。</li><li>缩进错误。（由于对格式的严格要求，Python语言也被称为“<strong>游标卡尺语言</strong>”）</li></ol><h3 id="Python执行方式"><a href="#Python执行方式" class="headerlink" title="Python执行方式"></a>Python执行方式</h3><ol><li>解释器 </li><li>交互式shell。默认shell适用于学习&#x2F;验证Python的语法或者局部代码</li><li>IPython交互式shell</li><li>IDE。例如Pycharm、Anaconda等</li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>First Article</title>
    <link href="/posts/43398/"/>
    <url>/posts/43398/</url>
    
    <content type="html"><![CDATA[<p>Welcome to my blog！This is my first article.</p><p>我其实很早就想搭建一个个人博客，但是由于各种事情一直没能实现。考完研之后这一想法再次涌上心头，于是花了一天时间终于把各种软件的安装和配置给弄完了。下面就将用到一些教程和注意事项贴出。</p><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p>我主要是按照这三篇教程一步一步操作的，从Git、nodejs、hexo的安装到将个人博客部署到github。这几篇教程对新手十分友好。</p><p><a href="https://cloud.tencent.com/developer/article/1373210">一文教会你如何搭建个人博客</a><br><a href="https://blog.csdn.net/sparkstark/article/details/124967315">Hexo个人博客安装及配置</a><br><a href="https://blog.csdn.net/guixinchn/article/details/107787660">Hexo博客部署到远程仓库（Conding、Gitee、Github）</a></p><p>第一篇文章中最核心的部分是<strong>将博客部署到远端</strong>（即github），但是按照该文章的步骤会报错。原因是没有配置用户的电子邮件地址和个人名，为此在部署前需要在bash中输入以下命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;2210749324@qq.com&quot;</span><br>$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Wangfuxun&quot;</span><br></code></pre></td></tr></table></figure><p>–global表示修改用户主目录下的配置信息，如果不含这一项，修改的仅为当前文件夹blog下的_config文件中的配置信息。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>在下载Git时，建议下载旧版本，比如2.38.0&#x2F;2.38.1，因为最新版2.39.0有bug，可能无法将博客部署到github（本人已踩过坑）。</p></li><li><p>Git官网下载非常慢，建议直接在镜像网站（比如淘宝）下载。</p></li><li><p>在部署时，遇到了一些问题，其解决方法如下，亲测好用。</p></li></ol><p><a href="https://blog.csdn.net/lvoelife/article/details/127370301">一文解决OpenSSL SSL_read: Connection was reset, errno 10054问题</a><br><a href="https://blog.csdn.net/m0_66695483/article/details/125036055">解决Failed to connect to github.com port 443: Timed out</a></p><ol start="4"><li>为了使文章有唯一的编号，使用了abbrlink插件生成文章链接。需要注意在hexo配置文件_config中修改permalink时需要注意加上末尾的&#x2F;，如果缺失，文章链接会变为下载链接。</li></ol><p><a href="https://blog.csdn.net/m0_51755720/article/details/127996199">Hexo使用Abbrlink插件生成文章固定编号链接</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在写博客时需要使用到markdown语法，非常简单，并且支持HTML标签。<a href="https://www.jianshu.com/p/191d1e21f7ed">Markdown基本语法</a></p><p>为了导入本地图片，需要按照这篇文章的内容进行操作，否则图片无法加载（已踩坑）。<br><a href="https://blog.csdn.net/kantaiyang/article/details/129159055">hexo无法显示本地图片的问题</a></p><p>加载图片格式如下,本地路径使用绝对路径或相对路径均可，例如：E:&#x2F;MyBlog&#x2F;blog&#x2F;source&#x2F;images&#x2F;test.png或者..&#x2F;images&#x2F;test.png。</p><p><code>![图片题注](图片存放路径)</code> </p><p>在Hexo官方文档中对写作&#x2F;生成静态文档&#x2F;配置等内容都有详细的介绍，有需要的话可以查看</p><p><a href="https://hexo.io/docs/">Documentation</a></p><p>以后我会不定期地在博客中更新自己的各种学习笔记。最后作为小白，我会努力向各位优秀的大佬学习，争取成为一个好的程序员，欢迎各位大佬指正不足。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
